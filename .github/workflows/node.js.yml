# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "backend"
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: "**/package-lock.json"

    - name: Install project dependencies
      run: npm install --prefer-offline --frozen-lockfile

    - name: Run Jest
      run: npm test
      env:
        ENV: PROD
        DB_CLOUD_URI: mongodb+srv://hanbin:81265496@ototb.iosbmu1.mongodb.net/?retryWrites=true&w=majority

  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: asia-southeast1-docker.pkg.dev/hybrid-dolphin-364409/cloud-run-source-deploy/backend:latest
    defaults:
      run:
        working-directory: "backend"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v0
      with:
        credentials_json: "${{secrets.GCP_CREDENTIALS}}"

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Authorise Docker push
      run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev

    - name: Build Docker image
      run: docker build . -t $IMAGE_NAME

    - name: Push Docker image
      run: docker push $IMAGE_NAME

    - name: Deploy Docker image
      run: gcloud run deploy backend --image $IMAGE_NAME --region asia-southeast1 --platform managed --allow-unauthenticated